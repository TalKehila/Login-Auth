// server.js


const express = require('express');  // library for node make a server 
const bcrypt = require('bcrypt'); // library for encreption passwords 
const { authenticator } = require('otplib'); // generate the TOTP code  time vase one time password 
const QRCode = require('qrcode'); // generate the qr code 

const app = express();
const PORT = 3000;

// Middleware
app.use(express.json());
app.use(express.static('public'));


const users = {}; 


app.get('/', (req, res) => {
    res.sendFile(__dirname + '/public/index.html');
});


// Registration endpoint
app.post('/register', async (req, res) => {
    const { username, password } = req.body;
    if (!username || !password) {
        return res.status(400).json({ message: 'Username and password required.' });
    }
    if (users[username]) {
        return res.status(400).json({ message: 'User already exists.' });
    }

    // making a password encyption in the Users {}
    try {
        const hashedPassword = await bcrypt.hash(password, 10); 
        const secret = authenticator.generateSecret(); // Generate a unique secret key for TOTP (used in QR code and authentication)
        users[username] = { password: hashedPassword, secret };

        const otpauth = authenticator.keyuri(username, 'MyApp', secret);  // Create an OTP authentication URI (contains the secret)
        const qrCode = await QRCode.toDataURL(otpauth); // Generate a QR code for the user to scan and set up 2FA


        return res.json({ message: 'Registration successful', qrCode });
    } catch (error) {
        console.error(error);
        return res.status(500).json({ message: 'Internal Server Error' });
    }
});



// Login endpoint
app.post('/login', async (req, res) => {
    const { username, password, totp } = req.body;
    if (!username || !password || !totp) {  // checking in login if some field is missed
        return res.status(400).json({ message: 'All fields are required.' });
    }
    /////  Validation: Check username, password, and 6-digit TOTP generated by the authenticator app
    const user = users[username];
    if (!user) {
        return res.status(400).json({ message: 'Invalid credentials.' });
    }
    try {
        const passwordValid = await bcrypt.compare(password, user.password);
        if (!passwordValid) {
            return res.status(400).json({ message: 'Invalid credentials.' });
        }
        const isValidTOTP = authenticator.check(totp, user.secret);
        if (!isValidTOTP) {
            return res.status(400).json({ message: 'Invalid 2FA code.' });
        }
        return res.json({ message: 'Login successful!' }); // when we login we should move here to next page  we want 
    } catch (error) {
        console.error(error);
        return res.status(500).json({ message: 'Internal Server Error' });
    }
});





// Start the server
app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});
